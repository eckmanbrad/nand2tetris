// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int curLen, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = null;
        }
        else {
            let str = Array.new(maxLength);
        }
        let maxLen = maxLength;
        let curLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (str = null){
            return;
        }
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curLen < maxLen) {
            let str[curLen] = c;
            let curLen = curLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (curLen > 0) {
            let curLen = curLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, c, is_neg;
        let i = 0;
        let val = 0;
        let is_neg = 1;
        if (str[i] = 45){
            let is_neg = (-1);
            let i = i + 1;
        }
        while (i < curLen){
            let c = str[i];
            if ((47 < c) & (c < 58)){
                let i = i + 1;
                let val = Math.multiply(val, 10) + (c - 48);
            }
            else {
                return is_neg * val;
            }
        }
        return is_neg * val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let curLen = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do setInt_inner(val);
        return;
    }

    method void setInt_inner(int val) {
        var int last, valDividedBy10;
        let valDividedBy10 = Math.divide(val, 10);
        let last = val - Math.multiply(valDividedBy10, 10);
        if (val < 11){
            do appendChar(48 + last);
            return;
        }
        do setInt_inner(valDividedBy10);
        do appendChar(48 + last);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
