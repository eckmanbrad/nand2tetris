// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static int remainder;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(15);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX, shiftedY;
        var int i;
        var boolean positive;

        if (((x < 0) & (y > 0)) | ((y < 0) & (x > 0))){
            let positive = false;
        }
        else {
            let positive = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        let sum = 0;
        let shiftedX = x;
        let shiftedY = y;
        let i = 0;

        while (i < 16) {
            if ((shiftedY & 1) = 1) {
                let sum = sum + shiftedX;
            }
            let shiftedX = ^shiftedX;
            let shiftedY = #shiftedY;
            let i = i + 1;
        }

        if (positive) {
            return sum;
        }
        else {
            return -sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean positive;
        if (((x < 0) & (y > 0)) | ((y < 0) & (x > 0))){
            let positive = false;
        }
        else {
            let positive = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);

        let remainder = 0;
        if (positive){
            return Math.recursiveDivideHelper(x, y);
        }

        return -Math.recursiveDivideHelper(x, y);
    }

    function int recursiveDivideHelper(int x, int y){
        var int q;
        if ((y < 0) | (y > x)) {
            return 0;
        }
        let q = Math.recursiveDivideHelper(x, y + y);
        let q = q + q;
        if ((x - remainder) > (y - 1)){
            let q = q + 1;
            let remainder = y + remainder;
        }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;

        let j = 7;
        let y = 0;

        while (j > (-1)) {
            let temp = Math.multiply((y + twoToThe[j]), (y + twoToThe[j]));
            if ((temp > 0) & ((temp - 1) < x)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }

//    function foo(int x){
//        var int i, cur;
//        var Array twoToThe;
//        let cur = 1;
//        let twoToThe = Array.new(16);
//        while (i < 16){
//            let twoToThe[i] = cur;
//            let cur = cur + cur;
//            let i = i + 1;
//        }
//        let cur = 0;
//        let i = 7;
//        while (~(i < 0)){
//            if (~((cur + twoToThe[i]) * (cur * twoToThe[i]) > x)){
//                let cur = cur + twoToThe[i];
//            }
//            let i = i - 1;
//        }
//        return cur;
//    }

}
