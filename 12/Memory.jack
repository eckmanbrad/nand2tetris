// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static int heapBase, freeListLength, freeList, freeListEnd;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        // The freeList consists of nodes, where each node holds it's size in
        // the first cell, the next node's address in the second cell,
        // followed by the block
        let freeList = heapBase;
        let freeListEnd = heapBase;
        let freeListLength = 14334;  // size of the heap, minus 2,
                                     // 16384-2048-2
        // Init the freeList with one large block of the entire heap
        let ram[freeList] = freeListLength;
        let ram[freeList + 1] = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int temp;
        let temp = freeList;
        while (~(temp = 0)) {
            // the current node is large enough
            if (ram[temp] > size + 2) {
                // block[-1] = size + 1
                let ram[temp + size + 1] = size + 1;
                // update temp's size to smaller size
                let ram[temp] = ram[temp] - (size + 1);
                // return block
                return temp + ram[temp] + 3;
            }
            // advance nodes and continue to search in the freeList
            let temp = ram[temp + 1];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // update the freeList s.t. o is the last node
        let ram[freeListEnd + 1] = (o - 1);
        // update the block's next node
        let ram[o] = 0;
        // update the block's size
        let ram[o - 1] = ram[o - 1] - 2;
        // remember the last node in the freeList for the next deAlloc
        let freeListEnd =  o - 1;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
        var int length, curMax, i;
        // every call the alloc stores the size in block[-1]
        let length = ram[o-1];
        let curMax = o[0];
        let i = 0;
        while (i < length) {
            if (o[i] > curMax) {
                let curMax = o[i];
            }
            let i = i + 1;
        }
        return curMax;
    }

}